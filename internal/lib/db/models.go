// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type SessionStatus string

const (
	SessionStatusPending  SessionStatus = "pending"
	SessionStatusAccepted SessionStatus = "accepted"
	SessionStatusRejected SessionStatus = "rejected"
)

func (e *SessionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SessionStatus(s)
	case string:
		*e = SessionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for SessionStatus: %T", src)
	}
	return nil
}

type NullSessionStatus struct {
	SessionStatus SessionStatus
	Valid         bool // Valid is true if SessionStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSessionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.SessionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SessionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSessionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SessionStatus), nil
}

type UserRole string

const (
	UserRoleUser             UserRole = "user"
	UserRoleEventCoordinator UserRole = "event_coordinator"
	UserRoleAdmin            UserRole = "admin"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole
	Valid    bool // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type ConferenceConfig struct {
	ID                   int32
	RegistrationStart    pgtype.Timestamptz
	RegistrationEnd      pgtype.Timestamptz
	SessionProposalStart pgtype.Timestamptz
	SessionProposalEnd   pgtype.Timestamptz
}

type EmailVerificationToken struct {
	ID        int32
	UserID    int32
	Token     pgtype.UUID
	CreatedAt pgtype.Timestamptz
	ExpiresAt pgtype.Timestamptz
}

type Feedback struct {
	ID        int32
	UserID    int32
	SessionID int32
	Comment   string
	CreatedAt pgtype.Timestamptz
	IsDeleted pgtype.Bool
}

type Session struct {
	ID              int32
	Title           string
	Description     pgtype.Text
	StartTime       pgtype.Timestamptz
	EndTime         pgtype.Timestamptz
	Room            pgtype.Text
	Status          SessionStatus
	SeatingCapacity int32
	ProposerID      pgtype.Int4
	CreatedAt       pgtype.Timestamptz
	UpdatedAt       pgtype.Timestamptz
	IsDeleted       pgtype.Bool
}

type SessionRegistration struct {
	ID           int32
	UserID       int32
	SessionID    int32
	RegisteredAt pgtype.Timestamptz
}

type User struct {
	ID             int32
	Email          string
	PasswordHash   string
	Role           UserRole
	FullName       pgtype.Text
	ProfilePictUrl pgtype.Text
	Affiliation    pgtype.Text
	IsVerified     bool
	VerifiedAt     pgtype.Timestamptz
	CreatedAt      pgtype.Timestamptz
	UpdatedAt      pgtype.Timestamptz
}
